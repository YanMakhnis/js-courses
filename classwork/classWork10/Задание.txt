<script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<script src="script.js" type="text/babel"></script>

https://ru.legacy.reactjs.org/docs/create-a-new-react-app.html
https://react.dev/learn/start-a-new-react-project

1) Создание компонента.
   1) Создайте корневой Реакт элемент
   2) Создайте Реакт компонент StartApp
      1) Добавьте ему метод render, и попробуйте отрендерить <div><h1>Заработало</h1></div>
   4) Создайте  Реакт компонент ListWrapper
      1) Добавьте ему метод render, и возвращайте <ul></ul>
   5) Создайте  Реакт компонент ListItem
      1) Добавьте ему метод render, и возвращайте <li></li>
   6) Вернитесь в StartApp, под h1 добавьте компонент ListWrapper, которому в качестве props, с любым именем, передайте массив todoList
   7) В компоненте ListWrapper примите пропса, переданного из StartApp, и на основе него создайте массив Реакт компонентов ListItem,
   которым элементы массива передавайте как дочерний контент, который поместите внутрь <ul>
	Незабудьте про атрибут key для компонентов в массиве.
   8) В ListItem, добавьте выведение дочернего контента.

2) Создание простого списка книг:
   Создайте компонент, который будет отображать список книг (названия, авторов, цену).
   Храните данные о книгах в состоянии компонента.
   Отобразите список книг на странице.

3) Сортировка книг по цене:
   Добавьте кнопки "Цена ↑" и "Цена ↓" над списком книг.
   При нажатии на кнопку, отсортируйте книги по возрастанию или убыванию цены.
   Подсветите выбранную кнопку, чтобы пользователь видел, какая сортировка активна.

4) Пагинация списка книг:
   Если у вас больше 6 книг, создайте пагинацию.
   Разделите список книг на страницы по 6 книг на каждой.
   Добавьте кнопки для переключения между страницами.
